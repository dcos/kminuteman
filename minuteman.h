// Check some assertions
#define CONFIG_X86_64 1
#ifndef CONFIG_X86_64
#error Requires x86_64
#endif

enum {
  MINUTEMAN_ATTR_UNSPEC,
  MINUTEMAN_ATTR_VIP,
  MINUTEMAN_ATTR_VIP_IP,
  MINUTEMAN_ATTR_VIP_PORT,
  MINUTEMAN_ATTR_VIP_BE,
  MINUTEMAN_ATTR_BE,
  MINUTEMAN_ATTR_BE_IP,
  MINUTEMAN_ATTR_BE_PORT,
  MINUTEMAN_ATTR_BE_REACH,  
  MINUTEMAN_ATTR_BE_CONSECUTIVE_FAILURES,
  MINUTEMAN_ATTR_BE_LAST_FAILURE,
  MINUTEMAN_ATTR_BE_PENDING,
  MINUTEMAN_ATTR_BE_TOTAL_FAILURES,
  MINUTEMAN_ATTR_BE_TOTAL_SUCCESSES,
  MINUTEMAN_ATTR_NOW,
  __MINUTEMAN_ATTR_MAX,
};

#define MINUTEMAN_ATTR_MAX (__MINUTEMAN_ATTR_MAX - 1)

enum {
  MINUTEMAN_CMD_UNSPEC,
  MINUTEMAN_CMD_NOOP,
  MINUTEMAN_CMD_ADD_VIP,
  MINUTEMAN_CMD_DEL_VIP,
  MINUTEMAN_CMD_ADD_BE,
  MINUTEMAN_CMD_DEL_BE,
  MINUTEMAN_CMD_SET_BE,
  MINUTEMAN_CMD_ATTACH_BE,
  MINUTEMAN_CMD_DETACH_BE,
  __MINUTEMAN_CMD_MAX,
};

#define MINUTEMAN_CMD_MAX (__MINUTEMAN_CMD_MAX - 1)

static struct nla_policy minuteman_policy[MINUTEMAN_ATTR_MAX + 1] = {
  [MINUTEMAN_ATTR_VIP] = {
    .type = NLA_NESTED,
  },
  [MINUTEMAN_ATTR_VIP_IP] = {
    .type = NLA_U32,
  },
  [MINUTEMAN_ATTR_VIP_PORT] = {
    .type = NLA_U16,
  },
  [MINUTEMAN_ATTR_VIP_BE] = {
    .type = NLA_NESTED,
  },
  [MINUTEMAN_ATTR_BE_IP] = {
    .type = NLA_U32,
  },
  [MINUTEMAN_ATTR_BE_PORT] = {
    .type = NLA_U16,
  },
  [MINUTEMAN_ATTR_BE_REACH] = {
    .type = NLA_U8,
  },
};

